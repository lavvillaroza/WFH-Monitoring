generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  EMPLOYEE
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DTRProblemStatus {
  PENDING
  RESOLVED
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(EMPLOYEE) 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employees               Employee[]
  dailyTimeRecordProblems DailyTimeRecordProblem[]
}

model Employee {
  id         String   @id @default(uuid())
  userId     String   @unique
  position   String
  department String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  dtr       DailyTimeRecord[]
  overtimes Overtime[]
  leaves    Leave[]
}

model DailyTimeRecord {
  id         Int      @id @default(autoincrement())
  employeeId String
  date       DateTime
  day        String
  checkIn    String?
  breakOut   String?
  breakIn    String?
  checkOut   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model DailyTimeRecordProblem {
  id        String          @id @default(uuid())
  userId    String
  date      DateTime
  type      String
  remarks     String
  status    DTRProblemStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Leave {
  id         String        @id @default(uuid())
  employeeId String
  leaveType  String
  startDate  DateTime
  endDate    DateTime
  reason     String
  status     RequestStatus @default(PENDING)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model Overtime {
  id         String        @id @default(uuid())
  employeeId String
  date       DateTime
  startTime  DateTime
  endTime    DateTime
  duration   Int  
  reason     String
  status     RequestStatus @default(PENDING)
  approvedBy String? 
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}
