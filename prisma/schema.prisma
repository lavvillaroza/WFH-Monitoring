generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  EMPLOYEE
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DTRProblemStatus {
  PENDING
  RESOLVED
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  employeeId    String   @unique 
  password  String
  name      String
  role      Role     @default(EMPLOYEE) 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String
  dailyTimeRecords        DailyTimeRecord[]
  dailyTimeRecordProblems DailyTimeRecordProblem[]
  overtimes               Overtime[]
  leaves                  Leave[]
}

model EmployeeDetails {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique @map("email")  // Ensuring email maps to User's email
  employeeId    String   @unique 
  position      String
  department    String
  contactNumber String?
  address       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model DailyTimeRecord {
  id        String   @id @default(uuid())
  userId    String
  date      DateTime @default(now())
  timeIn    DateTime
  timeOut   DateTime?  
  remarks   String?    
  createdAt DateTime @default(now())  
  updatedAt DateTime @updatedAt  

  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DailyTimeRecordProblem {
  id        String          @id @default(uuid())
  userId    String
  date      DateTime
  type      String
  remarks   String
  status    DTRProblemStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Leave {
  id         String        @id @default(uuid())
  userId     String
  leaveType  String
  startDate  DateTime
  endDate    DateTime
  reason     String
  status     RequestStatus @default(PENDING)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Overtime {
  id         String        @id @default(uuid())
  userId     String
  date       DateTime
  startTime  DateTime
  endTime    DateTime
  duration   Int  
  reason     String
  status     RequestStatus @default(PENDING)
  approvedBy String? 
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
